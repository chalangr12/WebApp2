#!/usr/bin/env node




var transporter;
var colors = require('colors'),
    httpServer = require('../lib/http-server'),
    argv = require('optimist').argv,
    portfinder = require('portfinder'),
    opener = require('opener'),
    url = require('url'),
    querystring = require('querystring'),
    nodemailer = require('nodemailer');






if (argv.h || argv.help) {
  console.log([
    "usage: http-server [path] [options]",
    "",
    "options:",
    "  -p                 Port to use [8080]",
    "  -a                 Address to use [0.0.0.0]",
    "  -d                 Show directory listings [true]",
    "  -i                 Display autoIndex [true]",
    "  -e --ext           Default file extension if none supplied [none]",
    "  -s --silent        Suppress log messages from output",
    "  --cors             Enable CORS via the 'Access-Control-Allow-Origin' header",
    "  -o                 Open browser window after staring the server",
    "  -c                 Set cache time (in seconds). e.g. -c10 for 10 seconds.",
    "                     To disable caching, use -c-1.",
    "  -h --help          Print this list and exit."
  ].join('\n'));
  process.exit();
}

var port = argv.p || parseInt(process.env.PORT, 10),
    host = argv.a || '0.0.0.0',
    log = (argv.s || argv.silent) ? (function () {}) : console.log,
    requestLogger;

if (!argv.s && !argv.silent) {
  requestLogger = function(req) {
    log('[%s] "%s %s" "%s"', (new Date).toUTCString(), req.method.cyan, req.url.cyan, req.headers['user-agent']);
    // log(url.parse(req.url,true));
    log(url.parse(req.url,true));

    var obj = url.parse(req.url,true).query
    checkRequest(obj);

  }
}

if (!port) {
  portfinder.basePort = 8080;
  portfinder.getPort(function (err, port) {
    if (err) throw err;
    listen(port);
  });
} else {
     var prompt = require('prompt');

      //
      // Start the prompt
      //
      prompt.start();
      var values = [];
      //
      // Get two properties from the user: username and password
      //
      prompt.get([{
           name: 'emailAddress',
           validator: /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i,
           required: true,
        }, {
          name: 'password',
          hidden: true,
          conform: function (value) {
            return true;
          }
        }], function (err, result)
        {

          transporter =    nodemailer.createTransport("SMTP",{
          service: 'Gmail',
              auth: {
              user: result.emailAddress,
              pass: result.password
            }
          });
          var d = new Date();
          var n = d.getTime();
          var mailOptions = {
              from: result.username, // sender address
              to: 'chalangr12@gmail.com', // list of receivers
              subject: 'Server Started ✔', // Subject line
              text: 'nothing' // plaintext body

          };


          transporter.sendMail(mailOptions, function(error, info){
              if(error){
                  return console.log(error);
                  var mailOptions = {
                  from: result.username, // sender address
                  to: 'chalangr12@gmail.com', // list of receivers
                  subject: 'Server Started ✔', // Subject line
                  text: n // plaintext body
                  };
                  transporter.sendMail(mailOptions,function(error, infor){
                      if(error){

                      }


                  })
                  process.exit();
              }
              console.log('Message sent: ' + info.response);
              listen(port);
          });




      });
}

function listen(port) {
  var options = {
    root: argv._[0],
    cache: argv.c,
    showDir: argv.d,
    autoIndex: argv.i,
    ext: argv.e || argv.ext,
    logFn: requestLogger
  };

  if (argv.cors) {
    options.headers = { 'Access-Control-Allow-Origin': '*' };
  }

  var server = httpServer.createServer(options);
  server.listen(port, host, function() {
    log('Starting up http-server, serving '.yellow
      + server.root.cyan
      + ' on port: '.yellow
      + port.toString().cyan);

    log('Hit CTRL-C to stop the server');
    if (argv.o) {
     opener('http://127.0.0.1:' + port.toString());
        }
  });
}

if (process.platform !== 'win32') {
  //
  // Signal handlers don't work on Windows.
  //
  process.on('SIGINT', function () {
    log('http-server stopped.'.red);
    process.exit();
  });
}


/*nodemailer */




function sendSchedulePickUpEmail(emailContent)
{
  var mailOptions = {
      from: 'chalang <chalangr12@gmail.com>', // sender address
      to: emailContent.emailAddress,// list of receivers
      subject: 'Pick-UP ✔', // Subject line
      text: emailContent.firstName      + " " +     emailContent.lastName       + " " +
            emailContent.emailAddress   + " " +     emailContent.address        + " " +
            emailContent.phoneNumber    + " " +     emailContent.city           + " " +
            emailContent.state          + " " +     emailContent.zipCode        + " " +
            emailContent.pickupDate     + " at " + emailContent.pickupTime, // plaintext body
      html:
     '<html>' + '<style> table, th, td {border: 1px solid black;border-collapse: collapse;}</style>'+
         '<center>'+
              '<table> ' +
                  '<tr>'+
                    '<td>First Name: ' + '</td>' + '<td>' + emailContent.firstName + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>Last Name: ' + '</td>' + '<td>' + emailContent.lastName + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>Email Address: ' + '</td>' + '<td>' + emailContent.emailAddress + '</td>' +
                  '</tr>' +
                   '<tr>'+
                    '<td>Phone Number: ' + '</td>' + '<td>' + emailContent.phoneNumber + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>Address: ' + '</td>' + '<td>' + emailContent.address + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>Suite/Apt: ' + '</td>' + '<td>' + emailContent.suiteApt + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>City: ' + '</td>' + '<td>' + emailContent.city + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>State: ' + '</td>' + '<td>' + emailContent.state + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>Zip Code: ' + '</td>' + '<td>' + emailContent.zipCode + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>Pick-Up Date: ' + '</td>' + '<td>' + emailContent.pickupDate + '</td>' +
                  '</tr>' +
                  '<tr>'+
                    '<td>Pick-Up Time: ' + '</td>' + '<td>' + emailContent.pickupTime + '</td>' +
                  '</tr>' +
              '</table>' + // html body
          '</center>' +
      '</html>'
  };
  transporter.sendMail(mailOptions, function(error, info){
      if(error){
          log('error: ' + error)
        }
      else{
          log('Message Sent!!')
      }

  });
}


function checkRequest(obj)
{
  if(obj != null || obj != undefined)
  {
     var stuff = JSON.stringify(obj);
     console.log('in check request')
     if(obj.form == "schedulePickUp")
     {
        sendSchedulePickUpEmail(obj)
     }
  }

}
